version: '3.8'

services:
  test_service:
    build:
      context: ../..
      dockerfile: backend/Dockerfile
    container_name: tests_container
    environment:
      NODE_ENV: test
    ports:
      - "3000:3000"
    networks:
      - app-net
    volumes:
      - ./test-results:/usr/src/app/test-results
    command: ["npm", "run", "test"]
    depends_on:
      - redis-master

  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
      NODE_ENV: test
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-net
  redis-master:
    image: redis:latest
    container_name: redis_master
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
    networks:
      - app-net  # Redis master on prod-net

  redis-replica:
    image: redis:latest
    container_name: redis_replica
    ports:
      - "6380:6379"
    command: [ "redis-server", "--slaveof", "redis-master", "6379", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
    networks:
      - app-net

  redis-replica2:
    image: redis:latest
    container_name: redis_replica2
    ports:
      - "6381:6379"
    command: [ "redis-server", "--slaveof", "redis-master", "6379", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
    networks:
      - app-net

volumes:
  redis_data:

networks:
  app-net:
    driver: bridge
